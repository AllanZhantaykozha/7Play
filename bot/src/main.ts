import { Telegraf, Markup } from "telegraf";
import * as dotenv from "dotenv";

dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN!);

interface IComputer {
  id: number;
  name: string;
  status: "free" | "busy" | "booked";
  ownersId: number[];
}

const computers: IComputer[] = [
  { id: 1, name: "PC-01", status: "free", ownersId: [] },
  { id: 2, name: "PC-02", status: "busy", ownersId: [] },
  { id: 3, name: "PC-03", status: "free", ownersId: [] },
  { id: 4, name: "PC-04", status: "booked", ownersId: [] },
  { id: 5, name: "PC-05", status: "busy", ownersId: [] },
  { id: 6, name: "PC-06", status: "free", ownersId: [] },
  { id: 7, name: "PC-07", status: "busy", ownersId: [] },
  { id: 8, name: "PC-08", status: "free", ownersId: [] },
  { id: 9, name: "PC-09", status: "booked", ownersId: [] },
  { id: 10, name: "PC-10", status: "free", ownersId: [] },
];

const userSelections = new Map<number, number>();

const buttonsComputers = computers
  .filter((obj) => obj.status === "free")
  .map((obj) => Markup.button.callback(obj.name, `booking_${obj.id}`));

bot.start((ctx) =>
  ctx.reply(
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ 7Play",
    Markup.keyboard([["üè† –ì–ª–∞–≤–Ω–æ–µ", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"], ["–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"]]).resize()
  )
);

bot.hears("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", async (ctx) => {
  ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}!\n\n–í—ã–±–µ—Ä–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä:`,
    Markup.inlineKeyboard(buttonsComputers, {
      columns: buttonsComputers.length <= 4 ? 1 : 3,
    })
  );
  ctx.deleteMessage();
});

bot.action(/booking_(.+)/, (ctx) => {
  ctx.answerCbQuery();

  const computerId = Number(ctx.match[1]);
  userSelections.set(ctx.from.id, computerId);

  const selected = computers.find((c) => c.id === computerId);

  ctx.reply(
    `–í—ã –≤—ã–±—Ä–∞–ª–∏ ‚Äî ${selected?.name}\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä?`,
    Markup.inlineKeyboard(
      [
        Markup.button.callback("‚úÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", "accept"),
        Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∞", "cancel"),
      ],
      { columns: 2 }
    )
  );

  ctx.deleteMessage();
});

bot.action("cancel", (ctx) => {
  ctx.answerCbQuery("–û—Ç–º–µ–Ω–µ–Ω–æ");
  ctx.reply("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå");
  ctx.deleteMessage();
});

bot.action("accept", (ctx) => {
  ctx.answerCbQuery();

  const userId = ctx.from.id;
  const selectedId = userSelections.get(userId);
  const selectedPC = computers.find((c) => c.id === selectedId);

  if (!selectedPC) {
    ctx.reply("–û—à–∏–±–∫–∞: –∫–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω üò¢");
    return;
  }

  selectedPC.status = "booked";
  selectedPC.ownersId.push(userId);

  ctx.reply(
    `‚úÖ –¢—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –∫–æ–º–ø—å—é—Ç–µ—Ä ${
      selectedPC.name
    }\nüìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString("ru-RU", {
      day: "2-digit",
      month: "long",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    })}`
  );

  ctx.deleteMessage();
});

bot.help((ctx) => ctx.reply("–Ø –ø–æ–∫–∞ —É–º–µ—é –Ω–µ–º–Ω–æ–≥–æ, –Ω–æ —Å–∫–æ—Ä–æ —Å—Ç–∞–Ω—É —É–º–Ω–µ–µ ü§ñ"));

bot.launch();
console.log("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...");
